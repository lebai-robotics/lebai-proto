syntax = "proto3";

package lebai.posture;

/// 关节空间 关节角
message JointPose {
  /// 关节度数（PI代表180°）
  repeated double joint = 1;
}

/// 关节空间参考系
message JointFrame {
  /// 关节空间参考系类型
  enum Kind {
    /// 关节零位
    BASE = 0;
    /// 当前关节位置
    CURRENT = 1;
    /// 指定关节位置
    CUSTOM = 99;
  }
  Kind kind = 1;
  /// 自定义关节位置，仅kind=CUSTOM时生效
  JointPose joints = 2;
}

/// 姿态3*3矩阵
message RotationMatrix {
  /// 9个元素
  repeated double matrix = 1;
}
/// 欧拉角
message Euler {
  double roll = 1;
  double pitch = 2;
  double yaw = 3;
}
/// 四元组
message Quaternion {
  double w = 1;
  double i = 2;
  double j = 3;
  double k = 4;
}
/// 枚举 姿态
message Rotation {
  oneof rotation {
    Euler euler = 1;
    Quaternion quaternion = 2;
    RotationMatrix matrix = 3;
  }
}
/// 位置
message Position {
  double x = 1;
  double y = 2;
  double z = 3;
}

/// 笛卡尔空间 位姿
message CartesianPose {
  Position position = 1;
  Rotation rotation = 2;
}

/// 笛卡尔空间 位姿4*4矩阵
message CartesianMatrix {
  /// 16个元素
  repeated double matrix = 1;
}

/// 笛卡尔空间参考系
message CartesianFrame {
  /// 笛卡尔空间参考系类型
  enum Kind {
    /// 基座
    BASE = 0;
    /// 法兰平面
    FLANGE = 1;
    /// TCP
    TCP = 2;
    /// 自定义
    CUSTOM = 99;
  }
  Kind position_kind = 1 [json_name = "position_kind"];
  /// 自定义位置，仅position_kind=CUSTOM时生效
  Position position = 2;
  Kind rotation_kind = 3 [json_name = "rotation_kind"];
  /// 自定义姿态，仅rotation_kind=CUSTOM时生效
  Rotation rotation = 4;
}

/// 机器人关节空间
message JointTargetPose {
  /// 参考系
  JointFrame base = 1;
  /// 增量
  JointPose delta = 2;
}
/// 机器人笛卡尔空间
message CartesianTargetPose {
  /// 参考系
  CartesianFrame base = 1;
  /// 增量
  CartesianPose delta = 2;
}
/// 枚举 机器人空间
message Pose {
  oneof pose {
    JointTargetPose joint = 1;
    CartesianTargetPose cart = 2;
  }
}

message PoseRequest {
  Pose pose = 1;
}
message KinematicsInverseRequest {
  Pose pose = 1;
  JointPose refer = 2;
}
message PoseTimesRequest {
  Pose base = 1;
  Pose target = 2;
}

/// 位姿算法相关服务
service PostureService {
  // 正解
  rpc KinematicsForward(PoseRequest) returns (CartesianPose);
  // 反解
  rpc KinematicsInverse(KinematicsInverseRequest) returns (JointPose);
  // 位姿乘
  rpc PoseTimes(PoseTimesRequest) returns (CartesianPose);
  // 位姿逆
  rpc PoseInverse(PoseRequest) returns (CartesianPose);
}