syntax = "proto3";

package lebai.posture;

import "google/protobuf/empty.proto";
import "db.proto";

// 关节空间 关节角
message JointPose {
  // 关节度数（PI代表180°）
  repeated double joint = 1;
}

// 关节空间参考系
message JointFrame {
  // 关节空间参考系类型
  enum Kind {
    // 关节零位
    BASE = 0;
    // 当前位置的关节位置，以收到指令时为准
    CURRENT = 1;
    // 上个目标点的关节位置
    LAST = 11;
    // 指定关节位置
    CUSTOM = 99;
  }
  Kind kind = 1;
  // 自定义关节位置，仅kind=CUSTOM时生效
  JointPose pose = 2;
}

// 姿态3*3矩阵
message RotationMatrix {
  double m11 = 11;
  double m12 = 12;
  double m13 = 13;
  double m21 = 21;
  double m22 = 22;
  double m23 = 23;
  double m31 = 31;
  double m32 = 32;
  double m33 = 33;
}
// 欧拉角
message EulerZyx {
  double x = 1;
  double y = 2;
  double z = 3;
}
// 四元组
message Quaternion {
  double w = 1;
  double i = 2;
  double j = 3;
  double k = 4;
}
// 枚举 姿态
message Rotation {
  EulerZyx euler_zyx = 1 [json_name = "euler_zyx"];
  Quaternion quaternion = 2;
  RotationMatrix matrix = 3;
}
// 位置
message Position {
  double x = 1;
  double y = 2;
  double z = 3;
}

// 笛卡尔空间 位姿
message CartesianPose {
  Position position = 1;
  Rotation rotation = 2;
}

// 笛卡尔空间 位姿4*4矩阵
message CartesianMatrix {
  double m11 = 11;
  double m12 = 12;
  double m13 = 13;
  double m14 = 14;
  double m21 = 21;
  double m22 = 22;
  double m23 = 23;
  double m24 = 24;
  double m31 = 31;
  double m32 = 32;
  double m33 = 33;
  double m34 = 34;
  double m41 = 41;
  double m42 = 42;
  double m43 = 43;
  double m44 = 44;
}

// 笛卡尔空间参考系
message CartesianFrame {
  // 笛卡尔空间参考系类型
  enum Kind {
    // 基座
    BASE = 0;
    // 当前位置的法兰平面，以收到指令时为准
    FLANGE = 1;
    // 当前位置的TCP，以收到指令时为准
    TCP = 2;
    // 上个目标点的法兰平面
    LAST_FLANGE = 11;
    // 上个目标点的TCP
    LAST_TCP = 12;
    // 自定义
    CUSTOM = 99;
  }
  Kind position_kind = 1 [json_name = "position_kind"];
  // 自定义位置，仅position_kind=CUSTOM时生效
  Position position = 2;
  Kind rotation_kind = 3 [json_name = "rotation_kind"];
  // 自定义姿态，仅rotation_kind=CUSTOM时生效
  Rotation rotation = 4;
}

// 枚举 机器人空间
message Pose {
  // 位姿类型，默认无效
  enum Kind {
    UNKNOWN = 0;
    JOINT = 1;
    CARTESIAN = 2;
  }
  Kind kind = 1;
  // 笛卡尔空间位姿，仅kind=CARTESIAN时生效
  CartesianPose cart = 11;
  // 笛卡尔空间参考系索引，仅kind=CARTESIAN时生效
  db.LoadRequest cart_frame_index = 12 [json_name = "cart_frame_index"];
  // 笛卡尔空间参考系，仅内部使用，仅kind=CARTESIAN时生效
  CartesianFrame cart_frame = 13 [json_name = "cart_frame"];
  // 关节空间位姿，仅kind=CARTESIAN时表示反解的参考位置
  JointPose joint = 21;
}
message SavePoseRequest {
  string name = 1;
  Pose data = 2;
  string dir = 11;
}
message SaveFrameRequest {
  string name = 1;
  CartesianFrame data = 2;
  string dir = 11;
}

message PoseRequest {
  Pose pose = 1;
}
message GetInverseKinRequest {
  Pose pose = 1;
  JointPose refer = 2;
}
message GetPoseTransRequest {
  Pose from = 1;
  Pose from_to = 2 [json_name = "from_to"];
}
message GetPoseAddRequest {
  // 关节空间 或 笛卡尔空间
  Pose pose = 1;
  // 在frame姿态方向的增量
  Pose delta = 2;
}

// 位姿算法相关服务
service PostureService {
  // 保存/修改/删除路点
  rpc SavePose(SavePoseRequest) returns (google.protobuf.Empty);
  // 查询路点
  rpc LoadPose(db.LoadRequest) returns (Pose);
  // 查询路点列表
  rpc LoadPoseList(db.LoadListRequest) returns (db.LoadListResponse);
  // 保存/修改/删除特征
  rpc SaveFrame(SaveFrameRequest) returns (google.protobuf.Empty);
  // 查询特征
  rpc LoadFrame(db.LoadRequest) returns (CartesianFrame);
  // 查询特征列表
  rpc LoadFrameList(db.LoadListRequest) returns (db.LoadListResponse);

  // 正解
  rpc GetForwardKin(PoseRequest) returns (CartesianPose);
  // 反解
  rpc GetInverseKin(GetInverseKinRequest) returns (JointPose);
  // 位姿乘
  rpc GetPoseTrans(GetPoseTransRequest) returns (CartesianPose);
  // 位姿加
  rpc GetPoseAdd(GetPoseAddRequest) returns (CartesianPose);
  // 位姿逆
  rpc GetPoseInverse(PoseRequest) returns (CartesianPose);
}