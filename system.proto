syntax = "proto3";

package lebai.system;

import "google/protobuf/empty.proto";
import "lebai.proto";
import "hardware.proto";

message HelloData {
  string data = 1;
}

message MemoryInfo {
  // 已用字节
  uint64 used = 11;
  // 总共字节
  uint64 total = 12;
  // 已用字节
  uint64 used_swap = 21 [json_name = "used_swap"];
  // 总共字节
  uint64 total_swap = 22 [json_name = "total_swap"];
}
message DiskInfo {
  // 硬盘节点
  string name = 1;
  // 已用字节
  uint64 used = 11;
  // 总共字节
  uint64 total = 12;
}
enum NetworkKind {
  // 未知
  UNKNOWN = 0;
  // 本地回环
  LOCAL = 1;
  // 以太网
  ETHERNET = 2;
  // 无线网
  WIRELESS = 3;
  // 蜂窝网
  CELLULAR = 4;
  // USB共享网络
  USB = 5;
  // Docker网络
  DOCKER = 11;
}
message NetworkInfo {
  // 网卡接口名
  string ifname = 1;
  // 网卡接口名
  NetworkKind kind = 2;
  // 是否虚拟IP
  bool is_virtual = 3 [json_name = "is_virtual"];
  // MAC地址
  string mac = 9;
  // IP地址
  repeated string ips = 11;
  // 网关地址
  string gateway = 21;
  // 子网掩码
  string netmask = 22;
}
message CpuInfo {
  string brand = 1;
  // CPU核心数
  uint32 num = 2;
  // CPU核心频率MHz
  uint64 frequency = 3;
  // 各个核心中的最高温度
  float temperature = 21;
  // CPU能容忍的临界温度
  float critical = 22;
}
message SystemInfo {
  string name = 1;
  string kernel_version = 2 [json_name = "kernel_version"];
  string os_version = 3 [json_name = "os_version"];
  string host_name = 4 [json_name = "host_name"];
  MemoryInfo memory = 11;
  repeated DiskInfo disks = 21;
  repeated NetworkInfo networks = 31;
  CpuInfo cpu = 41;
}

message SetVirtualIpRequest {
  // 网卡接口名
  string ifname = 1;
  // IP地址
  string ip = 11;
  // 子网掩码
  string netmask = 22;
}

enum BoxModel {
  LM3 = 0;
  LA3 = 10;
}
enum ArmModel {
  J6M1 = 0;
  J6L1 = 1;
  J5L1 = 11;
}

message RobotInfo {
  // 设备名称（唯一），形如 `lebai-123456`
  string name = 1;
  // 设备物理唯一标识（以太网 MAC 地址）
  string mac = 3;
  // 控制箱型号
  BoxModel box_model = 21 [json_name = "box_model"];
  // 控制箱序列号 `C`
  string box_sn = 22 [json_name = "box_sn"];
  // 手臂型号
  ArmModel arm_model = 31 [json_name = "arm_model"];
  // 手臂序列号 `R`
  string arm_sn = 32 [json_name = "arm_sn"];
}

message ComboardInfo {
  string sn = 1;
  string version = 2;
  hardware.FirmwarePartition partition = 3;
  uint32 di_num = 11 [json_name = "di_num"];
  uint32 do_num = 12 [json_name = "do_num"];
  uint32 ai_num = 13 [json_name = "ai_num"];
  uint32 ao_num = 14 [json_name = "ao_num"];
}
message JointInfo {
  string sn = 1;
  string version = 2;
  hardware.FirmwarePartition partition = 3;
}
message FlangeInfo {
  string sn = 1;
  string version = 2;
  hardware.FirmwarePartition partition = 3;
  uint32 di_num = 11 [json_name = "di_num"];
  uint32 do_num = 12 [json_name = "do_num"];
  uint32 ai_num = 13 [json_name = "ai_num"];
  uint32 ao_num = 14 [json_name = "ao_num"];
}
message LedInfo {
  string sn = 1;
  string version = 2;
  hardware.FirmwarePartition partition = 3;
}
message ExtraIoInfo {
  bool valid = 1;
  uint32 di_num = 11 [json_name = "di_num"];
  uint32 do_num = 12 [json_name = "do_num"];
  uint32 ai_num = 13 [json_name = "ai_num"];
  uint32 ao_num = 14 [json_name = "ao_num"];
}
message HardwareInfo {
  ComboardInfo comboard = 1;
  repeated JointInfo joints = 2;
  FlangeInfo flange = 3;
  LedInfo led = 4;
  ExtraIoInfo extra_io = 11 [json_name = "extra_io"];
}

message SoftwareInfo {
  string rc_version = 1 [json_name = "rc_version"];
}

// 机器人状态
enum RobotState {
  // 已断开连接
  DISCONNECTED = 0;
  // 急停停止状态
  ESTOP = 1;
  // 启动中
  BOOTING = 2;
  // 电源关闭
  ROBOT_OFF = 3;
  // 电源开启
  ROBOT_ON = 4;
  // 空闲中
  IDLE = 5;
  // 已暂停
  PAUSED = 6;
  // 机器人运动中
  MOVING = 7;
  // 更新固件中
  UPDATING = 8;
  // 启动中
  STARTING = 9;
  // 停止中
  STOPPING = 10;
  // 示教中
  TEACHING = 11;
  // 普通停止
  STOP = 12;
  // 微调中
  FINETUNING = 13;
}
message GetRobotStateResponse {
  RobotState state = 1;
}

// 物理数据
message PhyData {
  // 关节温度
  repeated double joint_temp = 2 [json_name = "joint_temp"];
  // 关节电压
  repeated double joint_voltage = 11 [json_name = "joint_voltage"];
  // 法兰电压
  double flange_voltage = 12 [json_name = "flange_voltage"];
}

// 急停原因
enum EstopReason {
  // 未急停
  NONE = 0;
  // 软件
  SYSTEM = 2;
  // 手动调用接口
  MANUAL = 3;
  // 硬急停按钮
  HARD_ESTOP = 4;
  // 碰撞
  COLLISION = 5;
  // 关节限位
  JOINT_LIMIT = 6;
  // 超速
  EXCEED = 7;
  // 运动规划错误
  TRAJECTORY_ERROR = 8;
  // 通信故障
  COMM_ERROR = 11;
  // CAN通信故障
  CAN_ERROR = 12;
  // 关节故障
  JOINT_ERROR = 13;
}
message GetEstopReasonResponse {
  EstopReason reason = 1;
}

// 系统控制相关服务
service SystemService {
  // Hello
  rpc Hello(HelloData) returns (HelloData);
  // 系统信息
  rpc GetSystemInfo(google.protobuf.Empty) returns (SystemInfo);
  // 机械臂信息
  rpc GetRobotInfo(google.protobuf.Empty) returns (RobotInfo);
  // 硬件信息
  rpc GetHardwareInfo(google.protobuf.Empty) returns (HardwareInfo);
  // 软件信息
  rpc GetSoftwareInfo(google.protobuf.Empty) returns (SoftwareInfo);
  // 设置虚拟IP
  rpc SetVirtualIp(SetVirtualIpRequest) returns (google.protobuf.Empty);
  // 获取机器人状态
  rpc GetRobotState(google.protobuf.Empty) returns (GetRobotStateResponse);
  // 订阅机器人状态
  rpc SubRobotState(SubscribeRequest) returns (stream GetRobotStateResponse);
  // 获取物理数据
  rpc GetPhyData(google.protobuf.Empty) returns (PhyData);
  // 订阅物理数据
  rpc SubPhyData(SubscribeRequest) returns (stream PhyData);
  // 关闭机器人电源（关机）
  rpc Powerdown(google.protobuf.Empty) returns (google.protobuf.Empty);
  // 重启系统
  rpc Reboot(google.protobuf.Empty) returns (google.protobuf.Empty);
  // 启动机器人
  rpc StartSys(google.protobuf.Empty) returns (google.protobuf.Empty);
  // 停止机器人（失能）
  rpc StopSys(google.protobuf.Empty) returns (google.protobuf.Empty);
  // 停止机器人运动
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);
  // 急停（下电）
  rpc Estop(google.protobuf.Empty) returns (google.protobuf.Empty);
  // 获取急停原因
  rpc GetEstopReason(google.protobuf.Empty) returns (GetEstopReasonResponse);
}
